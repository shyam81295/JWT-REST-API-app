package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/dgrijalva/jwt-go"

	"golang.org/x/crypto/bcrypt"

	"github.com/gorilla/mux"
	"github.com/lib/pq"
	"github.com/subosito/gotenv"
)

// User : holds User information
type User struct {
	ID       int    `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// JWT : Json Web Token information
type JWT struct {
	Token string `json:"token"`
}

// Error : Error message information
type Error struct {
	Message string `json:"message"`
}

var db *sql.DB

func main() {
	// loads Environment variables in .env file
	gotenv.Load()

	// parse the postgres URL to fetch DB information.
	pgURL, err := pq.ParseURL(os.Getenv("ELEPHANTSQL_URL"))
	if err != nil {
		log.Fatal(err)
	}

	// Open the sql DB.
	db, err = sql.Open("postgres", pgURL)
	if err != nil {
		log.Fatal(err)
	}

	// Check DB connection has been established.
	err = db.Ping()
	if err != nil {
		log.Fatal(err)
	}

	// Create the router & register API Endpoints and it's handler functions.
	router := mux.NewRouter()
	router.HandleFunc("/register", register).Methods("POST")
	router.HandleFunc("/login", login).Methods("POST")
	router.HandleFunc("/protected", TokenVerifyMiddleware(protectedEndpoint)).Methods("GET")

	// Start HTTP server
	log.Println("Listen on the port 8000...")
	log.Fatal(http.ListenAndServe(":8000", router)) // log.Fatal terminates the program (after printing the inside content) ONLY IF error is non-nil.
}

func respondWithError(w http.ResponseWriter, status int, error Error) {
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(error)
}

func responseJSON(w http.ResponseWriter, data interface{}) {
	json.NewEncoder(w).Encode(data)
}

func register(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Register Handler Invoked")
	var user User
	var error Error
	// Decoder reads and decodes JSON from input stream.
	// Decode stores JSON values in the value pointed to by the interface (here User struct).
	json.NewDecoder(r.Body).Decode(&user)

	// validate email
	if user.Email == "" {
		// respond with "Bad Request" status error.
		error.Message = "Email ID cannot be empty."
		respondWithError(w, http.StatusBadRequest, error)
		return
	}

	// validate password
	if user.Password == "" {
		// respond with "Bad Request" status error.
		error.Message = "Password cannot be empty."
		respondWithError(w, http.StatusBadRequest, error)
		return
	}

	// Hash the password using bcrypt library, returns hashed password in slice of bytes.
	hash, err := bcrypt.GenerateFromPassword([]byte(user.Password), 10)
	if err != nil {
		log.Fatal(err)
	}

	// Convert a slice of bytes to string
	user.Password = string(hash)

	// Push User Email & it's hashed Password to DB, also get the ID generated by Postgres DB.
	stmt := "insert into users (email, password) values ($1, $2) RETURNING ID;"
	err = db.QueryRow(stmt, user.Email, user.Password).Scan(&user.ID)

	// If error from DB, then give out Internal Server error.
	if err != nil {
		error.Message = "Server Error."
		respondWithError(w, http.StatusInternalServerError, error)
		return
	}

	// For response, we can't send hashed password back.
	user.Password = ""

	// Write the Response back with User's ID & Email and blank password.
	w.Header().Set("Content-Type", "application/json")
	responseJSON(w, user)

}

// GenerateToken : When user logs in, we will call GenerateToken() to generate token for login handler using User's credentials.
func GenerateToken(user User) (string, error) {
	var err error

	// a jwt
	// header.payload.secret
	secret := os.Getenv("SECRET")

	// create a jwt with claims using User's Email.
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"email": user.Email,
		"iss":   "course",
	})

	tokenString, err := token.SignedString([]byte(secret))
	if err != nil {
		log.Fatal(err)
	}

	return tokenString, nil
}

func login(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Login Handler Invoked")
	var user User
	var jwt JWT
	var error Error

	// Decode the User's request
	json.NewDecoder(r.Body).Decode(&user)

	// Validate Email
	if user.Email == "" {
		error.Message = "Email cannot be empty."
		respondWithError(w, http.StatusBadRequest, error)
		return
	}

	// validate Password
	if user.Password == "" {
		error.Message = "Password cannot be empty."
		respondWithError(w, http.StatusBadRequest, error)
		return
	}

	passwordGiven := user.Password

	stmt := "select * from users where email=$1"
	err := db.QueryRow(stmt, user.Email).Scan(&user.ID, &user.Email, &user.Password)

	if err != nil {
		if err != sql.ErrNoRows {
			log.Fatal(err)
		} else {
			error.Message = "User does not exist"
			respondWithError(w, http.StatusBadRequest, error)
			return
		}
	}

	hashedPassword := user.Password

	err = bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(passwordGiven))
	if err != nil {
		error.Message = "Invalid Password"
		respondWithError(w, http.StatusBadRequest, error)
		return
	}

	tokenString, err := GenerateToken(user)
	if err != nil {
		log.Fatal(err)
	}

	// If we reach here, then it means User's credentials are correct
	// 	and Token has been generated to be given as response.
	w.WriteHeader(http.StatusOK)
	jwt.Token = tokenString
	responseJSON(w, jwt)

}

func protectedEndpoint(w http.ResponseWriter, r *http.Request) {
	fmt.Println("protectedEndpoint Handler Invoked")
}

// TokenVerifyMiddleware : sits between API endpoint & its handler function. If token is valid, then only it provides handler fucntion.
func TokenVerifyMiddleware(next http.HandlerFunc) http.HandlerFunc {

	return func(w http.ResponseWriter, r *http.Request) {
		secret := os.Getenv("SECRET")
		var errorObj Error
		authHeader := r.Header.Get("Authorization")
		bearerToken := strings.Split(authHeader, " ")

		if len(bearerToken) == 2 {
			authToken := bearerToken[1]

			// Parse expects 'JWT token to be verified' should be passed.
			// Also it expects that we do both :
			// 		verify the algorithm of header and return the signing "secret' in the callback function of Parse.
			//		so that it can be verify authToken.
			// Parse() parses, validates & returns the parsed token
			token, err := jwt.Parse(authToken, func(token *jwt.Token) (interface{}, error) {
				if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
					return nil, fmt.Errorf("There was an Error")
				}

				return []byte(secret), nil
			})

			if err != nil {
				errorObj.Message = err.Error() // Giving out JWT's errors to message
				respondWithError(w, http.StatusUnauthorized, errorObj)
				return
			}

			if token.Valid {
				next.ServeHTTP(w, r)
			} else {
				errorObj.Message = err.Error() // Giving out JWT's errors to message
				respondWithError(w, http.StatusUnauthorized, errorObj)
				return
			}
		} else {
			errorObj.Message = "Invalid token"
			respondWithError(w, http.StatusBadRequest, errorObj)
			return
		}
	}
}
